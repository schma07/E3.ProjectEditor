// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectEditor.Persistence.Repositories.DBContext;

namespace ProjectEditor.Persistence.Migrations
{
    [DbContext(typeof(ProjectEditorDbContext))]
    [Migration("20220523190714_update1")]
    partial class update1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectEditor.Core.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a81c327-07a9-4b1d-a400-222b785f6481"),
                            Name = "DummyCustomer Mani & Friends"
                        },
                        new
                        {
                            Id = new Guid("02d2f7a4-8c6e-4f2e-873e-7edc45314939"),
                            Name = "DummyCustomer Hudli und Murks"
                        },
                        new
                        {
                            Id = new Guid("651dd1b3-5abe-4884-9be8-59338c6165c8"),
                            Name = "DummyCustomer Blue Monday"
                        });
                });

            modelBuilder.Entity("ProjectEditor.Core.Entities.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256)
                        .HasDefaultValue("Unknown");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93752f09-7eb5-4d1c-8c25-b744a5c4dbbe"),
                            Name = "DummyDevice -K300",
                            ProjectId = new Guid("ed9c66c8-e2eb-4764-b625-96657b603d25")
                        },
                        new
                        {
                            Id = new Guid("c5d683d9-f1f2-4c7a-9f3a-857ab00f2105"),
                            Name = "DummyDevice -S200",
                            ProjectId = new Guid("087b0654-c840-43a2-b827-90d47c5ba041")
                        },
                        new
                        {
                            Id = new Guid("d4d2cf99-99f1-4e29-b429-c03a6f1ff492"),
                            Name = "DummyDevice -S450",
                            ProjectId = new Guid("fe04d159-3cd6-4a19-a53e-48ab4425b5fd")
                        });
                });

            modelBuilder.Entity("ProjectEditor.Core.Entities.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed9c66c8-e2eb-4764-b625-96657b603d25"),
                            CustomerId = new Guid("2a81c327-07a9-4b1d-a400-222b785f6481"),
                            Name = "TimeControl 2.1"
                        },
                        new
                        {
                            Id = new Guid("087b0654-c840-43a2-b827-90d47c5ba041"),
                            CustomerId = new Guid("02d2f7a4-8c6e-4f2e-873e-7edc45314939"),
                            Name = "WeatherChanger V1.0"
                        },
                        new
                        {
                            Id = new Guid("fe04d159-3cd6-4a19-a53e-48ab4425b5fd"),
                            CustomerId = new Guid("651dd1b3-5abe-4884-9be8-59338c6165c8"),
                            Name = "Water2Wine Vers.A"
                        });
                });

            modelBuilder.Entity("ProjectEditor.Core.Entities.Devices.Device", b =>
                {
                    b.HasOne("ProjectEditor.Core.Entities.Projects.Project", "Project")
                        .WithMany("Devices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectEditor.Core.Entities.Projects.Project", b =>
                {
                    b.HasOne("ProjectEditor.Core.Entities.Customers.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
